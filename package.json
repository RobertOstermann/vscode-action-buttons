{
  "name": "custom-commands",
  "displayName": "Custom Commands",
  "description": "Add customizable commands within VSCode.",
  "version": "1.0.0",
  "publisher": "RobertOstermann",
  "repository": {
    "type": "git",
    "url": "https://github.com/RobertOstermann/vscode-action-buttons"
  },
  "engines": {
    "vscode": "^1.73.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "status bar",
    "action",
    "buttons",
    "task",
    "runner"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./out/src/extension",
  "contributes": {
    "commands": [
      {
        "command": "customCommands.refreshExtension",
        "title": "Custom Commands: Refresh Extension"
      }
    ],
    "configuration": {
      "title": "Custom Commands",
      "properties": {
        "customCommands.defaultColor": {
          "type": "string",
          "required": false,
          "default": "customCommands.foreground",
          "markdownDescription": "The color to use for status bar button text. The default is the theme color."
        },
        "customCommands.configurationFile": {
          "type": "string",
          "required": false,
          "default": "",
          "markdownDescription": "Use a configuration file named `customCommands.json` or `commands.json`. Set this to `Find` to search for the configuration file in the workspace."
        },
        "customCommands.reloadButton": {
          "type": [
            "string",
            "null"
          ],
          "required": false,
          "default": null,
          "markdownDescription": "The text for the reload button. The default is to reload on configuration change and not show a reload button."
        },
        "customCommands.commands": {
          "type": "array",
          "default": [],
          "markdownDescription": "A list of commands.",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "uniqueItems": true,
            "default": {
              "id": "",
              "label": "",
              "command": ""
            },
            "required": [
              "id",
              "command"
            ],
            "properties": {
              "id": {
                "type": "string",
                "markdownDescription": "The unique ID of the command. The ID is prepended with the extension name `customCommands`."
              },
              "label": {
                "type": "string",
                "markdownDescription": "The label for the command. This adds the command to the command palette."
              },
              "command": {
                "type": "string",
                "markdownDescription": "This specifies the command to execute in the terminal. If `executeCommand` is `true`, this is the [command](https://code.visualstudio.com/api/extension-guides/command#programmatically-executing-a-command) to execute."
              },
              "executeCommand": {
                "type": "boolean",
                "default": false,
                "markdownDescription": "Should the command execute a visual studio code provided [command](https://code.visualstudio.com/api/extension-guides/command#programmatically-executing-a-command)."
              },
              "executeCommandArguments": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": [],
                "markdownDescription": "A list of arguments passed to the command. Only valid when `executeCommand` is `true`."
              },
              "terminal": {
                "type": "object",
                "additionalProperties": false,
                "markdownDescription": "The terminal settings for this command. Only valid when `executeCommand` is `false`.",
                "properties": {
                  "name": {
                    "type": "string",
                    "markdownDescription": "The name of the terminal for this command. If a terminal with this name is already open then the terminal will be re-used."
                  },
                  "clear": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Determines if the terminal is cleared before the specified command is run."
                  },
                  "workingDirectory": {
                    "type": "string",
                    "markdownDescription": "Set the working directory for the terminal."
                  },
                  "focus": {
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Focus the terminal after executing the command."
                  },
                  "singleInstance": {
                    "type": "boolean",
                    "default": true,
                    "markdownDescription": "Re-open the same terminal each time this action is activated."
                  }
                }
              }
            }
          }
        },
        "customCommands.dropdowns": {
          "type": "array",
          "default": [],
          "markdownDescription": "A command that opens a quick-select of specified commands.",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "uniqueItems": true,
            "default": {
              "id": "",
              "label": "",
              "commands": []
            },
            "required": [
              "id",
              "label"
            ],
            "properties": {
              "id": {
                "type": "string",
                "markdownDescription": "The unique ID of the command. The ID is prepended with the extension name `customCommands`."
              },
              "label": {
                "type": "string",
                "markdownDescription": "The label for the command. This adds the command to the command palette."
              },
              "commands": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": [],
                "markdownDescription": "A list with the id or label for the commands to display in the dropdown."
              },
              "options": {
                "type": "object",
                "additionalProperties": false,
                "markdownDescription": "The quick-select options.",
                "properties": {
                  "ignoreFocusOut": {
                    "type": "boolean",
                    "default": false,
                    "markdownDescription": "Determines if the dropdown should stay open even when loosing dropdown focus."
                  },
                  "placeholder": {
                    "type": "string",
                    "markdownDescription": "Optional placeholder in the filter text."
                  },
                  "title": {
                    "type": "string",
                    "markdownDescription": "An optional title."
                  }
                }
              }
            }
          }
        },
        "customCommands.statusBar.items": {
          "alignment": {
            "type": "number",
            "enum": [
              1,
              2
            ],
            "default": 1,
            "markdownEnumDescriptions": [
              "Aligned to the left side.",
              "Aligned to the right side."
            ],
            "markdownDescription": "The alignment of the item on the status bar."
          },
          "color": {
            "type": "string",
            "default": "customCommands.foreground",
            "markdownDescription": "The color of the item on the status bar."
          },
          "priority": {
            "type": "number",
            "default": 0,
            "markdownDescription": "The priority of this item. A higher value means the item should be shown more to the left."
          },
          "tooltip": {
            "type": "string",
            "markdownDescription": "Tooltip text to display when hovering over the button."
          }
        }
      }
    },
    "jsonValidation": [
      {
        "fileMatch": [
          "commands.json",
          "commands.jsonc",
          "commands.json",
          "commands.jsonc",
          "commands.json",
          "commands.jsonc",
          "commands.json",
          "commands.jsonc",
          "customCommands.json",
          "customCommands.jsonc",
          "customCommands.json",
          "customCommands.jsonc",
          "customCommands.json",
          "customCommands.jsonc",
          "customCommands.json",
          "customCommands.jsonc",
          "customCommands.json",
          "customCommands.jsonc"
        ],
        "url": "./out/src/schema/commands.schema.json"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "publish": "vsce publish",
    "compile": "rimraf out && tsc -p ./ && npm run copyfiles",
    "copyfiles": "copyfiles \"./src/schema/*.json\" \"./out\"",
    "watch": "tsc -watch -p ./",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "node ./node_modules/vscode/bin/test"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/mocha": "^2.2.32",
    "@types/node": "^16.10.2",
    "@typescript-eslint/eslint-plugin": "^5.13.0",
    "@typescript-eslint/parser": "^5.13.0",
    "copyfiles": "^2.4.1",
    "eslint": "^8.10.0",
    "eslint-plugin-simple-import-sort": "^7.0.0",
    "eslint-plugin-tsdoc": "^0.2.14",
    "mocha": "^6.1.4",
    "typescript": "^4.4.3",
    "vscode": "^1.0.0"
  },
  "dependencies": {
    "glob": "^8.0.3"
  }
}
